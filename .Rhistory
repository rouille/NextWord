titi <- subset(tata, Freq > 0 & Var1 != Var2)
titi
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
str(toto)
toto$year
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
toto[24,]
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
toto[23,]
toto[22,]
str(tata)
tata
tata[1:30]
tata[1:30,]
str(connection)
connection <- as.data.frame(table(prizes$bornCountryCode, prizes$diedCountryCode), stringsAsFactors = FALSE)
migration <- subset(connection, Freq > 0 & Var1 != Var2)
str(migration)
migration
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
install.packages("D3")
install.packages("D3", type = 'binary')
install.packages("D3", type = 'source')
install.packages("networkD3", type = 'source')
shiny::runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
shiny::runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
shiny::runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
library(rsconnect)
rsconnect::setAccountInfo(name='rouille', token='56679EBF3DDAD64DC49DB4D170C91C4E', secret='k0PJwBMWTo7cwButkPaLaqzH65YIZB2tVoGZn4Eo')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
library(curl)
prizes$year
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
names(nobel$laureates)
names(prizes)
nobel$laureates$surname
nobel$laureates$firstname
nobel$laureates$surname
nobel$laureates$firstname
names(prizes)
prizes$motivation
names(prizes)
names(nobel$laureates)
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
name <- with(prizes, cbind(firstname, surname, year, motivation) )
name <- with(prizes, cbind(firstname, lastname, year, motivation) )
names(prizes)
nobel  <- fromJSON("http://api.nobelprize.org/v1/laureate.json")
prizes <- ldply(nobel$laureates$prizes, as.data.frame)
count <- sapply(nobel$laureates$prizes, function(x) nrow(x) )
prizes$firstname <- rep(nobel$laureates$firstname, count)
prizes$lastname <- rep(nobel$laureates$lastname, count)
prizes$gender <- rep(nobel$laureates$gender, count)
prizes$born <- rep(nobel$laureates$born, count)
prizes$bornCountry <- rep(nobel$laureates$bornCountry, count)
prizes$bornCountryCode <- rep(nobel$laureates$bornCountryCode, count)
prizes$diedCountry <- rep(nobel$laureates$diedCountry, count)
prizes$diedCountryCode <- rep(nobel$laureates$diedCountryCode, count)
prizes$age <- as.numeric(as.Date(paste(prizes$year,"12-31",sep = "-"),"%Y-%m-%d")-as.Date(prizes$born,"%Y-%m-%d") )/365
for(i in c("2","3","4") ) prizes$share[which(prizes$share == i)] <- paste("1",i,sep = "/")
prizes <- prizes[!is.na(prizes$category), ]
names(prizes)
prizes$lastname <- rep(nobel$laureates$surname, count)
prizes <- ldply(nobel$laureates$prizes, as.data.frame)
count <- sapply(nobel$laureates$prizes, function(x) nrow(x) )
prizes$firstname <- rep(nobel$laureates$firstname, count)
prizes$lastname <- rep(nobel$laureates$surname, count)
prizes$gender <- rep(nobel$laureates$gender, count)
prizes$born <- rep(nobel$laureates$born, count)
prizes$bornCountry <- rep(nobel$laureates$bornCountry, count)
prizes$bornCountryCode <- rep(nobel$laureates$bornCountryCode, count)
prizes$diedCountry <- rep(nobel$laureates$diedCountry, count)
prizes$diedCountryCode <- rep(nobel$laureates$diedCountryCode, count)
prizes$age <- as.numeric(as.Date(paste(prizes$year,"12-31",sep = "-"),"%Y-%m-%d")-as.Date(prizes$born,"%Y-%m-%d") )/365
for(i in c("2","3","4") ) prizes$share[which(prizes$share == i)] <- paste("1",i,sep = "/")
prizes <- prizes[!is.na(prizes$category), ]
names(prizes)
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
name <- with(prizes, cbind(firstname, lastname, year, motivation) )
str(name)
name <- select(prizes, cbind(firstname, lastname, year, motivation)
)
name <- select(prizes, firstname, lastname, year, motivation)
str(name)
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
names(nobel)
gender <- as.data.frame(table(nobel$laureates$gender), stringsAsFactors = FALSE)
str(gender)
names(nobel$laureates)
names(nobel$laureates$prizes)
names(prizes)
gender <- nobel$laureates$gender
gender
gender <- as.data.frame(table(nobel$laureates$gender), stringsAsFactors = FALSE)
str(gender)
table(nobel$laureates$gender
)
toto <- table(nobel$laureates$gender)
str(toto)
names(toto)
toto[1]
as.numeric(tapply)
as.numeric(toto)
runApp('~/Coursera/DataScienceSpecialization/DataProducts/Assignment3/Nobel')
file.info("~/Coursera/DataScienceSpecialieation/10-Capstone/Week1/final/en_US.blogs.txt")
file.info("~/Coursera/DataScienceSpecialization/10-Capstone/Week1/final/en_US.blogs.txt")
file.info("~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US.blogs.txt")
file.info("~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/en_US.blogs.txt")
file <- "~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/en_US.blogs.txt"
file.info(file)
size <- file.info(file)$size
print(size)
size <- file.info(file)$size / 1024^2 # from bytes to megabytes
print(size)
file <- "~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/en_US.twitter.txt"
"l "+ file
paste("l "+ file)
paste("l"+ file)
paste("l",file)
paste("-l",file)
nLines <- system2("wc", args = paste("-l",file),  )
nLines
system2("wc", args = paste("-l",file),  )
system2("wc", args = paste("-l",file) )
dir <- "~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/"
files <- list.files(dir)
files
dir <- "~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/"
files <- list.files(dir)
for (file in files) {
system2("wc", args = paste("-w",file) )
}
files
for (file in files) {
print(file)
#system2("wc", args = paste("-w",file) )
}
dir <- "~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/"
files <- list.files(dir)
for (file in files) {
system2("wc", args = paste0("-w ",dir,file) )
}
dir <- "~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/"
files <- list.files(dir)
for (file in files) {
lines <- readLines(paste0(dir,file) )
max(nchar(lines) )
}
files
blogs <- readLines("~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/en_US.blogs.txt")
files
files[0]
files[1]
blogs <- paste0(dir,file[1])
news <- paste0(dir,file[2])
twitter <- paste0(dir,file[3])
blogs
news
twitter
files <- list.files(dir)
blogs <- paste0(dir,files[1])
news <- paste0(dir,files[2])
twitter <- paste0(dir,files[3])
blogs
news
twitter
dir <- "~/Coursera/DataScienceSpecialization/10-Capstone/final/en_US/"
files <- list.files(dir)
blogs <- readLines(paste0(dir,files[1]) )
news <- readLines(paste0(dir,files[2]) )
twitter <- readLines(paste0(dir,files[3]) )
max(nchar(blogs) )
max(nchar(news) )
max(nchar(twitter) )
nLove <- sum(grepl("love", twitter) )
nHate <- sum(grepl("hate", twitter) )
nLove, nHate
nLove
nHate
nLove/nHate
tweet <- grep("biostats", twitter)
tweet
tweeter[556872]
tweeter[556872]
twiter[556872]
twitter[556872]
tweet <- twitter[grep("biostats", twitter)]
tweet
quote <- "A computer once beat me at chess, but it was no match for me at kickboxing"
nTweet <- sum(grepl(quote, twitter) )
nTweet
install.packages("RWeka")
install.packages("ngram")
library("ngram")
x <- "a b a c a b b"
string.summary(x)
string.summary(x, wordlen_max = 1)
string.summary(x, wordlen_max = 0)
install.packages("wordcloud")
library("wordcloud")
strsplit("for the", " ")
length(strsplit("for the", " ") )
length(strsplit("for the", " ")[1] )
length(strsplit("for the", " ")[2] )
length(unlist(strsplit("for the", " ") ) )
library("ngram")
install.packages("markovchain")
install.packages("markovchain")
library("markovchain")
rentalStates <- c("Downtown", "East", "West")
rentalTransition <- matrix(c(0.3, 0.3, 0.4,
+ 0.4, 0.4, 0.2,
+ 0.5, 0.3, 0.2),
+ byrow = T, nrow = 3, dimnames = list(rentalStates, rentalStates))
rentalTransition
rentalTransition <- matrix(c(0.3, 0.3, 0.4,
+ 0.4, 0.4, 0.2,
+ 0.5, 0.3, 0.2), byrow = T, nrow = 3, dimnames = list(rentalStates, rentalStates) )
rentalTransition
mcRental <- new("markovchain", states = rentalStates, byrow = T,
transitionMatrix = rentalTransition, name = "Rental Cars")
# We can access the transition matrix just by calling the mc object
mcRental
mcRental[1]  # the probabilities that we go Downtown, East, and West, given that we are currently Downtown
plot(mcRental)
setwd("~/Coursera/DataScienceSpecialization/10-Capstone/Week3/Assignment")
load("ngrams_splitted.RData")
library("data.table")
library("ngram")
model <- function(sentence, onegram, twogram, threegram, fourgram, fivegram, lambda = 0.4, nPredict = 5) {
sentence <- preprocess(sentence, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
words <- unlist(strsplit(sentence, " ") )
nWords <- length(words)
inputFourGram  <- paste(words[(nWords-3):nWords], collapse = " ")
inputThreeGram <- paste(words[(nWords-2):nWords], collapse = " ")
inputTwoGram   <- paste(words[(nWords-1):nWords], collapse = " ")
inputOneGram   <- paste(words[nWords:nWords],     collapse = " ")
output <- data.table()
# 5-gram
matchedFiveGram <- fivegram[first == inputFourGram, .(last, freq)]
if (nrow(matchedFiveGram) >= 1) {
inputFourGramCount <- fourgram[all == inputFourGram, sum(freq)]
outputFiveGram <- matchedFiveGram[, score := freq/inputFourGramCount]
output <- rbind(output, outputFiveGram[, .(last, score)])
print("5-gram")
}
# 4-gram
matchedFourGram <- fourgram[first == inputThreeGram, .(last, freq)]
if (nrow(matchedFourGram) >= 1) {
inputThreeGramCount <- threegram[all == inputThreeGram, sum(freq)]
outputFourGram <- matchedFourGram[, score := lambda * freq/inputThreeGramCount]
output <- rbind(output, outputFourGram[, .(last, score)])
print("4-gram")
}
# 3-gram
matchedThreeGram <- threegram[first == inputTwoGram, .(last, freq)]
if (nrow(matchedThreeGram) >= 1) {
inputTwoGramCount <- twogram[all == inputTwoGram, sum(freq)]
outputThreeGram <- matchedThreeGram[, score := lambda * lambda * freq/inputTwoGramCount]
output <- rbind(output, outputThreeGram[, .(last, score)])
print("3-gram")
}
# 2-gram
matchedTwoGram <- twogram[first == inputOneGram, .(last, freq)]
if (nrow(matchedTwoGram) >= 1) {
inputOneGramCount <- onegram[ngrams == inputOneGram, sum(freq)]
outputTwoGram <- matchedTwoGram[, score := lambda * lambda * lambda * freq/inputOneGramCount]
output <- rbind(output, outputTwoGram[, .(last, score)])
print("2-gram")
}
return(output[1:nPredict,])
}
sentence <- "The guy in front of me just bought a pound of bacon, a bouquet, and a case of"
model(sentence, onegram, twogram, threegram, fourgram, fivegram)
sentence <- "You're the reason why I smile everyday. Can you follow me please? It would mean the"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "Hey sunshine, can you follow me and make me the"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "Very early observations on the Bills game: Offense still struggling but the"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "Go on a romantic date at the"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "Be grateful for the good times and keep the faith during the"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "If this isn't the cutest thing you've ever seen, then you must be"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
tail(onegram)
tail(onegram, n = 10)
tail(twogram, n = 10)
tail(threegram, n = 10)
tail(fourgram, n = 10)
tail(fivegram, n = 10)
tail(onegram, n = 10)
grep("\u", onegram)
grep("\u0", onegram)
grep("u0", onegram)
grep("u0", onegram$ngrams)
sentence <- "Hello, how are you"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
model <- function(sentence, onegram, twogram, threegram, fourgram, fivegram, lambda = 0.4, nPredict = 5) {
sentence <- preprocess(sentence, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
words <- unlist(strsplit(sentence, " ") )
nWords <- length(words)
inputFourGram  <- paste(words[(nWords-3):nWords], collapse = " ")
inputThreeGram <- paste(words[(nWords-2):nWords], collapse = " ")
inputTwoGram   <- paste(words[(nWords-1):nWords], collapse = " ")
inputOneGram   <- paste(words[nWords:nWords],     collapse = " ")
output <- data.table()
# 5-gram
matchedFiveGram <- fivegram[first == inputFourGram, .(last, freq)]
if (nrow(matchedFiveGram) >= 1) {
inputFourGramCount <- fourgram[all == inputFourGram, sum(freq)]
outputFiveGram <- matchedFiveGram[, score := freq/inputFourGramCount]
output <- rbind(output, outputFiveGram[, .(last, score)])
print(paste("5-gram:", nrow(matchedFiveGram) ) )
}
# 4-gram
matchedFourGram <- fourgram[first == inputThreeGram, .(last, freq)]
if (nrow(matchedFourGram) >= 1) {
inputThreeGramCount <- threegram[all == inputThreeGram, sum(freq)]
outputFourGram <- matchedFourGram[, score := lambda * freq/inputThreeGramCount]
output <- rbind(output, outputFourGram[, .(last, score)])
print(paste("4-gram:", nrow(matchedFourGram) ) )
}
# 3-gram
matchedThreeGram <- threegram[first == inputTwoGram, .(last, freq)]
if (nrow(matchedThreeGram) >= 1) {
inputTwoGramCount <- twogram[all == inputTwoGram, sum(freq)]
outputThreeGram <- matchedThreeGram[, score := lambda * lambda * freq/inputTwoGramCount]
output <- rbind(output, outputThreeGram[, .(last, score)])
print("3-gram")
}
# 2-gram
matchedTwoGram <- twogram[first == inputOneGram, .(last, freq)]
if (nrow(matchedTwoGram) >= 1) {
inputOneGramCount <- onegram[ngrams == inputOneGram, sum(freq)]
outputTwoGram <- matchedTwoGram[, score := lambda * lambda * lambda * freq/inputOneGramCount]
output <- rbind(output, outputTwoGram[, .(last, score)])
print("2-gram")
}
return(output[1:nPredict,])
}
sentence <- "Hello, how are you"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
grepl("hello how are you", fivegram$all)
grep("hello how are you", fivegram$all)
fivegram[c(288141, 462962),]
sentence <- "If this isn't the cutest thing you've ever seen, then you must be"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
sentence <- "Hello, how are you"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
toto <- model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
toto
unique(toto)
unique(toto$last)
unique.data.frame(toto)
unique(toto)
duplicated(toto)
subset(toto, !duplicated(toto[,3])
)
subset(toto, !duplicated(toto[,1])
)
subset(toto, !duplicated(toto[,last]) )
model <- function(sentence, onegram, twogram, threegram, fourgram, fivegram, lambda = 0.4, nPredict = 5) {
sentence <- preprocess(sentence, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
words <- unlist(strsplit(sentence, " ") )
nWords <- length(words)
inputFourGram  <- paste(words[(nWords-3):nWords], collapse = " ")
inputThreeGram <- paste(words[(nWords-2):nWords], collapse = " ")
inputTwoGram   <- paste(words[(nWords-1):nWords], collapse = " ")
inputOneGram   <- paste(words[nWords:nWords],     collapse = " ")
output <- data.table()
# 5-gram
matchedFiveGram <- fivegram[first == inputFourGram, .(last, freq)]
if (nrow(matchedFiveGram) >= 1) {
inputFourGramCount <- fourgram[all == inputFourGram, sum(freq)]
outputFiveGram <- matchedFiveGram[, score := freq/inputFourGramCount]
output <- rbind(output, outputFiveGram[, .(last, score)])
print(paste("5-gram:", nrow(matchedFiveGram) ) )
}
# 4-gram
matchedFourGram <- fourgram[first == inputThreeGram, .(last, freq)]
if (nrow(matchedFourGram) >= 1) {
inputThreeGramCount <- threegram[all == inputThreeGram, sum(freq)]
outputFourGram <- matchedFourGram[, score := lambda * freq/inputThreeGramCount]
output <- rbind(output, outputFourGram[, .(last, score)])
print(paste("4-gram:", nrow(matchedFourGram) ) )
}
# 3-gram
matchedThreeGram <- threegram[first == inputTwoGram, .(last, freq)]
if (nrow(matchedThreeGram) >= 1) {
inputTwoGramCount <- twogram[all == inputTwoGram, sum(freq)]
outputThreeGram <- matchedThreeGram[, score := lambda * lambda * freq/inputTwoGramCount]
output <- rbind(output, outputThreeGram[, .(last, score)])
print("3-gram")
}
# 2-gram
matchedTwoGram <- twogram[first == inputOneGram, .(last, freq)]
if (nrow(matchedTwoGram) >= 1) {
inputOneGramCount <- onegram[ngrams == inputOneGram, sum(freq)]
outputTwoGram <- matchedTwoGram[, score := lambda * lambda * lambda * freq/inputOneGramCount]
output <- rbind(output, outputTwoGram[, .(last, score)])
print("2-gram")
}
output <- subset(toto, !duplicated(output[,last]) )
return(output[1:nPredict,])
}
sentence <- "Hello, how are you"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
model <- function(sentence, onegram, twogram, threegram, fourgram, fivegram, lambda = 0.4, nPredict = 5) {
sentence <- preprocess(sentence, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
words <- unlist(strsplit(sentence, " ") )
nWords <- length(words)
inputFourGram  <- paste(words[(nWords-3):nWords], collapse = " ")
inputThreeGram <- paste(words[(nWords-2):nWords], collapse = " ")
inputTwoGram   <- paste(words[(nWords-1):nWords], collapse = " ")
inputOneGram   <- paste(words[nWords:nWords],     collapse = " ")
output <- data.table()
# 5-gram
matchedFiveGram <- fivegram[first == inputFourGram, .(last, freq)]
if (nrow(matchedFiveGram) >= 1) {
inputFourGramCount <- fourgram[all == inputFourGram, sum(freq)]
outputFiveGram <- matchedFiveGram[, score := freq/inputFourGramCount]
output <- rbind(output, outputFiveGram[, .(last, score)])
print(paste("5-gram:", nrow(matchedFiveGram) ) )
}
# 4-gram
matchedFourGram <- fourgram[first == inputThreeGram, .(last, freq)]
if (nrow(matchedFourGram) >= 1) {
inputThreeGramCount <- threegram[all == inputThreeGram, sum(freq)]
outputFourGram <- matchedFourGram[, score := lambda * freq/inputThreeGramCount]
output <- rbind(output, outputFourGram[, .(last, score)])
print(paste("4-gram:", nrow(matchedFourGram) ) )
}
# 3-gram
matchedThreeGram <- threegram[first == inputTwoGram, .(last, freq)]
if (nrow(matchedThreeGram) >= 1) {
inputTwoGramCount <- twogram[all == inputTwoGram, sum(freq)]
outputThreeGram <- matchedThreeGram[, score := lambda * lambda * freq/inputTwoGramCount]
output <- rbind(output, outputThreeGram[, .(last, score)])
print("3-gram")
}
# 2-gram
matchedTwoGram <- twogram[first == inputOneGram, .(last, freq)]
if (nrow(matchedTwoGram) >= 1) {
inputOneGramCount <- onegram[ngrams == inputOneGram, sum(freq)]
outputTwoGram <- matchedTwoGram[, score := lambda * lambda * lambda * freq/inputOneGramCount]
output <- rbind(output, outputTwoGram[, .(last, score)])
print("2-gram")
}
output <- subset(output, !duplicated(output[,last]) )
return(output[1:nPredict,])
}
sentence <- "Hello, how are you"
model(sentence,  onegram, twogram, threegram, fourgram, fivegram)
library("tm")
unigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min=1, max=1))
test <- "Three weeks later, businessman Ferris Kleem took Dimora and former county Auditor Frank Russo to Las Vegas, showering them with airfare and gambling money in exchange for their help on projects, federal prosecutors said."
test <- preprocess(sentence, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
test
test <- preprocess(test, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
test
test <- "Three weeks later, businessman Ferris Kleem took Dimora and former county Auditor Frank Russo to Las Vegas, showering them with airfare and gambling money in exchange for their help on projects, federal prosecutors said."
test <- preprocess(test, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
test
ngram <- ngram(words, n = 3)
library("ngrams")
library("ngram")
ngram <- ngram(words, n = 3)
ngram <- ngram(test, n = 3)
ngram
get.phrasetable(ngram)
toto <- readLines("~/Desktop/toto.txtx", skipNul = TRUE, encoding = "UTF-8")
toto <- readLines("~/Desktop/toto.txt", skipNul = TRUE, encoding = "UTF-8")
toto
tata <- concatenate(toto)
tata
tata <- preprocess(toto, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
tata <- preprocess(tata, remove.punct = TRUE, remove.numbers = TRUE, fix.spacing = TRUE)
tata
toto
trigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min=3, max=3))
triTDM <- TermDocumentMatrix(toto, control=list(tokenize=trigramTokenizer))
corpus <- VCorpus(DirSource("~/Desktop/toto.txt"))
corpus <- VCorpus(DirSource("~/Test/"))
corpus <- VCorpus(DirSource("~/Test/") )
corpus <- VCorpus(DirSource("~/Desktop/Test/") )
triTDM <- TermDocumentMatrix(toto, control=list(tokenize=trigramTokenizer))
str(corpus)
trigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min=3, max=3))
triTDM <- TermDocumentMatrix(corpus, control=list(tokenize=trigramTokenizer))
library("RWeka")
install.packages("RWeka")
library("RWeka", type = 'source)'
)
library("RWeka", type = 'source')
